import numpy as np
import pathlib
import jax.numpy as jnp
from smefit import log
from smefit.rge.rge import RGE
from smefit.coefficients import CoefficientManager

current_file_path = pathlib.Path(__file__).resolve().parent

oo_ww_wc_basis = ["OpD", "OpWB", "OWWW", "Opl1", "Ope", "O3pl1"]
oo_tt_wc_basis = ["OpQM", "Opt", "OtW", "OtZ", "OQl1M", "OQe", "Otl1", "Ote"]

_logger = log.logging.getLogger(__name__)


def compute_rge_matrix(coefficients, rge_dict, scale):
    rge_runner = RGE(
        wc_names=coefficients.name,
        init_scale=rge_dict["init_scale"],
        accuracy=rge_dict.get("smeft_accuracy", "integrate"),
        adm_QCD=rge_dict.get("adm_QCD", False),
        yukawa=rge_dict.get("yukawa", "top"),
    )
    rge_df = rge_runner.RGEmatrix(scale)
    gen_operators = list(rge_df.index)
    _logger.info("The operators generated by the RGE are: ")
    _logger.info(gen_operators)
    operators_dict = {k: {"max": 0.0, "min": 0.0} for k in gen_operators}
    new_coeffs = CoefficientManager.from_dict(operators_dict)

    return rge_df.values, new_coeffs


class OptimalWWLCF250:
    def __init__(self, coefficients, rge_dict=None):
        if rge_dict is not None:
            rgemat, coefficients = compute_rge_matrix(
                coefficients, rge_dict, scale=250.0
            )
        else:
            rgemat = None

        self.project = np.zeros((len(oo_ww_wc_basis), coefficients.size))
        for i, op in enumerate(oo_ww_wc_basis):
            if op in coefficients.name:
                self.project[i, np.argwhere(coefficients.name == op)[0, 0]] = 1

        self.datasets = {
            "LCF_ww_lepto_250_neg80_neg30": "invcov_LCF_ww_leptonic_250_neg80_neg30.dat",
            "LCF_ww_lepto_250_neg80_pos30": "invcov_LCF_ww_leptonic_250_neg80_pos30.dat",
            "LCF_ww_lepto_250_pos80_neg30": "invcov_LCF_ww_leptonic_250_pos80_neg30.dat",
            "LCF_ww_lepto_250_pos80_pos30": "invcov_LCF_ww_leptonic_250_pos80_pos30.dat",
            "LCF_ww_semilep_250_neg80_neg30": "invcov_LCF_ww_semilep_250_neg80_neg30.dat",
            "LCF_ww_semilep_250_neg80_pos30": "invcov_LCF_ww_semilep_250_neg80_pos30.dat",
            "LCF_ww_semilep_250_pos80_neg30": "invcov_LCF_ww_semilep_250_pos80_neg30.dat",
            "LCF_ww_semilep_250_pos80_pos30": "invcov_LCF_ww_semilep_250_pos80_pos30.dat",
        }

        incovs_reordered = []
        for path in self.datasets.values():
            invcov = np.loadtxt(current_file_path / path)
            temp = jnp.einsum("ij, jk, kl", self.project.T, invcov, self.project)
            incovs_reordered.append(temp)
        self.incov_tot = jnp.sum(jnp.array(incovs_reordered), axis=0)

        self.rgemat = rgemat

        if self.rgemat is not None:
            # multiply the RGE matrix as well
            self.incov_tot = jnp.einsum(
                "ij, jk, kl", self.rgemat.T, self.incov_tot, self.rgemat
            )

        self.n_dat = len(oo_ww_wc_basis)

    def compute_chi2(self, coefficient_values):
        chi2_value = jnp.einsum(
            "i, ij, j", coefficient_values, self.incov_tot, coefficient_values
        )

        return chi2_value


class OptimalWWLCF5004ab:
    def __init__(self, coefficients, rge_dict=None):
        if rge_dict is not None:
            rgemat, coefficients = compute_rge_matrix(
                coefficients, rge_dict, scale=500.0
            )
        else:
            rgemat = None

        self.project = np.zeros((len(oo_ww_wc_basis), coefficients.size))
        for i, op in enumerate(oo_ww_wc_basis):
            if op in coefficients.name:
                self.project[i, np.argwhere(coefficients.name == op)[0, 0]] = 1

        self.datasets = {
            "LCF_ww_lepto_500_4ab_neg80_neg30": "invcov_LCF_ww_leptonic_500_4ab_neg80_neg30.dat",
            "LCF_ww_lepto_500_4ab_neg80_pos30": "invcov_LCF_ww_leptonic_500_4ab_neg80_pos30.dat",
            "LCF_ww_lepto_500_4ab_pos80_neg30": "invcov_LCF_ww_leptonic_500_4ab_pos80_neg30.dat",
            "LCF_ww_lepto_500_4ab_pos80_pos30": "invcov_LCF_ww_leptonic_500_4ab_pos80_pos30.dat",
            "LCF_ww_semilep_500_4ab_neg80_neg30": "invcov_LCF_ww_semilep_500_4ab_neg80_neg30.dat",
            "LCF_ww_semilep_500_4ab_neg80_pos30": "invcov_LCF_ww_semilep_500_4ab_neg80_pos30.dat",
            "LCF_ww_semilep_500_4ab_pos80_neg30": "invcov_LCF_ww_semilep_500_4ab_pos80_neg30.dat",
            "LCF_ww_semilep_500_4ab_pos80_pos30": "invcov_LCF_ww_semilep_500_4ab_pos80_pos30.dat",
        }

        incovs_reordered = []
        for path in self.datasets.values():
            invcov = np.loadtxt(current_file_path / path)
            temp = jnp.einsum("ij, jk, kl", self.project.T, invcov, self.project)
            incovs_reordered.append(temp)
        self.incov_tot = jnp.sum(jnp.array(incovs_reordered), axis=0)

        self.rgemat = rgemat

        if self.rgemat is not None:
            # multiply the RGE matrix as well
            self.incov_tot = jnp.einsum(
                "ij, jk, kl", self.rgemat.T, self.incov_tot, self.rgemat
            )

        self.n_dat = len(oo_ww_wc_basis)

    def compute_chi2(self, coefficient_values):
        chi2_value = jnp.einsum(
            "i, ij, j", coefficient_values, self.incov_tot, coefficient_values
        )

        return chi2_value


class OptimalWWLCF5008ab:
    def __init__(self, coefficients, rge_dict=None):
        if rge_dict is not None:
            rgemat, coefficients = compute_rge_matrix(
                coefficients, rge_dict, scale=500.0
            )
        else:
            rgemat = None

        self.project = np.zeros((len(oo_ww_wc_basis), coefficients.size))
        for i, op in enumerate(oo_ww_wc_basis):
            if op in coefficients.name:
                self.project[i, np.argwhere(coefficients.name == op)[0, 0]] = 1

        self.datasets = {
            "LCF_ww_lepto_500_8ab_neg80_neg30": "invcov_LCF_ww_leptonic_500_8ab_neg80_neg30.dat",
            "LCF_ww_lepto_500_8ab_neg80_pos30": "invcov_LCF_ww_leptonic_500_8ab_neg80_pos30.dat",
            "LCF_ww_lepto_500_8ab_pos80_neg30": "invcov_LCF_ww_leptonic_500_8ab_pos80_neg30.dat",
            "LCF_ww_lepto_500_8ab_pos80_pos30": "invcov_LCF_ww_leptonic_500_8ab_pos80_pos30.dat",
            "LCF_ww_semilep_500_8ab_neg80_neg30": "invcov_LCF_ww_semilep_500_8ab_neg80_neg30.dat",
            "LCF_ww_semilep_500_8ab_neg80_pos30": "invcov_LCF_ww_semilep_500_8ab_neg80_pos30.dat",
            "LCF_ww_semilep_500_8ab_pos80_neg30": "invcov_LCF_ww_semilep_500_8ab_pos80_neg30.dat",
            "LCF_ww_semilep_500_8ab_pos80_pos30": "invcov_LCF_ww_semilep_500_8ab_pos80_pos30.dat",
        }

        incovs_reordered = []
        for path in self.datasets.values():
            invcov = np.loadtxt(current_file_path / path)
            temp = jnp.einsum("ij, jk, kl", self.project.T, invcov, self.project)
            incovs_reordered.append(temp)
        self.incov_tot = jnp.sum(jnp.array(incovs_reordered), axis=0)

        self.rgemat = rgemat

        if self.rgemat is not None:
            # multiply the RGE matrix as well
            self.incov_tot = jnp.einsum(
                "ij, jk, kl", self.rgemat.T, self.incov_tot, self.rgemat
            )

        self.n_dat = len(oo_ww_wc_basis)

    def compute_chi2(self, coefficient_values):
        chi2_value = jnp.einsum(
            "i, ij, j", coefficient_values, self.incov_tot, coefficient_values
        )

        return chi2_value


class OptimalWWLCF1000:
    def __init__(self, coefficients, rge_dict=None):
        if rge_dict is not None:
            rgemat, coefficients = compute_rge_matrix(
                coefficients, rge_dict, scale=1000.0
            )
        else:
            rgemat = None

        self.project = np.zeros((len(oo_ww_wc_basis), coefficients.size))
        for i, op in enumerate(oo_ww_wc_basis):
            if op in coefficients.name:
                self.project[i, np.argwhere(coefficients.name == op)[0, 0]] = 1

        self.datasets = {
            "LCF_ww_lepto_1000_neg80_neg20": "invcov_LCF_ww_leptonic_1000_neg80_neg20.dat",
            "LCF_ww_lepto_1000_neg80_pos20": "invcov_LCF_ww_leptonic_1000_neg80_pos20.dat",
            "LCF_ww_lepto_1000_pos80_neg20": "invcov_LCF_ww_leptonic_1000_pos80_neg20.dat",
            "LCF_ww_lepto_1000_pos80_pos20": "invcov_LCF_ww_leptonic_1000_pos80_pos20.dat",
            "LCF_ww_semilep_1000_neg80_neg20": "invcov_LCF_ww_semilep_1000_neg80_neg20.dat",
            "LCF_ww_semilep_1000_neg80_pos20": "invcov_LCF_ww_semilep_1000_neg80_pos20.dat",
            "LCF_ww_semilep_1000_pos80_neg20": "invcov_LCF_ww_semilep_1000_pos80_neg20.dat",
            "LCF_ww_semilep_1000_pos80_pos20": "invcov_LCF_ww_semilep_1000_pos80_pos20.dat",
        }

        incovs_reordered = []
        for path in self.datasets.values():
            invcov = np.loadtxt(current_file_path / path)
            temp = jnp.einsum("ij, jk, kl", self.project.T, invcov, self.project)
            incovs_reordered.append(temp)
        self.incov_tot = jnp.sum(jnp.array(incovs_reordered), axis=0)

        self.rgemat = rgemat

        if self.rgemat is not None:
            # multiply the RGE matrix as well
            self.incov_tot = jnp.einsum(
                "ij, jk, kl", self.rgemat.T, self.incov_tot, self.rgemat
            )

        self.n_dat = len(oo_ww_wc_basis)

    def compute_chi2(self, coefficient_values):
        chi2_value = jnp.einsum(
            "i, ij, j", coefficient_values, self.incov_tot, coefficient_values
        )

        return chi2_value


class OptimalttLCF350:
    def __init__(self, coefficients, rge_dict=None):
        if rge_dict is not None:
            rgemat, coefficients = compute_rge_matrix(
                coefficients, rge_dict, scale=350.0
            )
        else:
            rgemat = None

        self.project = np.zeros((len(oo_tt_wc_basis), coefficients.size))
        for i, op in enumerate(oo_tt_wc_basis):
            if op in coefficients.name:
                self.project[i, np.argwhere(coefficients.name == op)[0, 0]] = 1

        self.datasets = {
            "LCF_tt_wbwb_350_neg80_neg30": "invcov_LCF_tt_wbwb_350_neg80_neg30.dat",
            "LCF_tt_wbwb_350_pos80_neg30": "invcov_LCF_tt_wbwb_350_pos80_neg30.dat",
            "LCF_tt_wbwb_350_neg80_pos30": "invcov_LCF_tt_wbwb_350_neg80_pos30.dat",
            "LCF_tt_wbwb_350_pos80_pos30": "invcov_LCF_tt_wbwb_350_pos80_pos30.dat",
        }

        incovs_reordered = []
        for path in self.datasets.values():
            invcov = np.loadtxt(current_file_path / path)
            temp = jnp.einsum("ij, jk, kl", self.project.T, invcov, self.project)
            incovs_reordered.append(temp)
        self.incov_tot = jnp.sum(jnp.array(incovs_reordered), axis=0)

        self.rgemat = rgemat

        if self.rgemat is not None:
            # multiply the RGE matrix as well
            self.incov_tot = jnp.einsum(
                "ij, jk, kl", self.rgemat.T, self.incov_tot, self.rgemat
            )

        self.n_dat = len(oo_tt_wc_basis)

    def compute_chi2(self, coefficient_values):
        chi2_value = jnp.einsum(
            "i, ij, j", coefficient_values, self.incov_tot, coefficient_values
        )

        return chi2_value


class OptimalttLCF5004ab:
    def __init__(self, coefficients, rge_dict=None):
        if rge_dict is not None:
            rgemat, coefficients = compute_rge_matrix(
                coefficients, rge_dict, scale=500.0
            )
        else:
            rgemat = None

        self.project = np.zeros((len(oo_tt_wc_basis), coefficients.size))
        for i, op in enumerate(oo_tt_wc_basis):
            if op in coefficients.name:
                self.project[i, np.argwhere(coefficients.name == op)[0, 0]] = 1

        self.datasets = {
            "LCF_tt_wbwb_500_4ab_neg80_neg30": "invcov_LCF_tt_wbwb_500_4ab_neg80_neg30.dat",
            "LCF_tt_wbwb_500_4ab_pos80_neg30": "invcov_LCF_tt_wbwb_500_4ab_pos80_neg30.dat",
            "LCF_tt_wbwb_500_4ab_neg80_pos30": "invcov_LCF_tt_wbwb_500_4ab_neg80_pos30.dat",
            "LCF_tt_wbwb_500_4ab_pos80_pos30": "invcov_LCF_tt_wbwb_500_4ab_pos80_pos30.dat",
        }

        incovs_reordered = []
        for path in self.datasets.values():
            invcov = np.loadtxt(current_file_path / path)
            temp = jnp.einsum("ij, jk, kl", self.project.T, invcov, self.project)
            incovs_reordered.append(temp)
        self.incov_tot = jnp.sum(jnp.array(incovs_reordered), axis=0)

        self.rgemat = rgemat

        if self.rgemat is not None:
            # multiply the RGE matrix as well
            self.incov_tot = jnp.einsum(
                "ij, jk, kl", self.rgemat.T, self.incov_tot, self.rgemat
            )

        self.n_dat = len(oo_tt_wc_basis)

    def compute_chi2(self, coefficient_values):
        chi2_value = jnp.einsum(
            "i, ij, j", coefficient_values, self.incov_tot, coefficient_values
        )

        return chi2_value


class OptimalttLCF5008ab:
    def __init__(self, coefficients, rge_dict=None):
        if rge_dict is not None:
            rgemat, coefficients = compute_rge_matrix(
                coefficients, rge_dict, scale=500.0
            )
        else:
            rgemat = None

        self.project = np.zeros((len(oo_tt_wc_basis), coefficients.size))
        for i, op in enumerate(oo_tt_wc_basis):
            if op in coefficients.name:
                self.project[i, np.argwhere(coefficients.name == op)[0, 0]] = 1

        self.datasets = {
            "LCF_tt_wbwb_500_8ab_neg80_neg30": "invcov_LCF_tt_wbwb_500_8ab_neg80_neg30.dat",
            "LCF_tt_wbwb_500_8ab_pos80_neg30": "invcov_LCF_tt_wbwb_500_8ab_pos80_neg30.dat",
            "LCF_tt_wbwb_500_8ab_neg80_pos30": "invcov_LCF_tt_wbwb_500_8ab_neg80_pos30.dat",
            "LCF_tt_wbwb_500_8ab_pos80_pos30": "invcov_LCF_tt_wbwb_500_8ab_pos80_pos30.dat",
        }

        incovs_reordered = []
        for path in self.datasets.values():
            invcov = np.loadtxt(current_file_path / path)
            temp = jnp.einsum("ij, jk, kl", self.project.T, invcov, self.project)
            incovs_reordered.append(temp)
        self.incov_tot = jnp.sum(jnp.array(incovs_reordered), axis=0)

        self.rgemat = rgemat

        if self.rgemat is not None:
            # multiply the RGE matrix as well
            self.incov_tot = jnp.einsum(
                "ij, jk, kl", self.rgemat.T, self.incov_tot, self.rgemat
            )

        self.n_dat = len(oo_tt_wc_basis)

    def compute_chi2(self, coefficient_values):
        chi2_value = jnp.einsum(
            "i, ij, j", coefficient_values, self.incov_tot, coefficient_values
        )

        return chi2_value


class OptimalttLCF1000:
    def __init__(self, coefficients, rge_dict=None):
        if rge_dict is not None:
            rgemat, coefficients = compute_rge_matrix(
                coefficients, rge_dict, scale=1000.0
            )
        else:
            rgemat = None

        self.project = np.zeros((len(oo_tt_wc_basis), coefficients.size))
        for i, op in enumerate(oo_tt_wc_basis):
            if op in coefficients.name:
                self.project[i, np.argwhere(coefficients.name == op)[0, 0]] = 1

        self.datasets = {
            "LCF_tt_wbwb_1000_neg80_neg20": "invcov_LCF_tt_wbwb_1000_neg80_neg20.dat",
            "LCF_tt_wbwb_1000_pos80_neg20": "invcov_LCF_tt_wbwb_1000_pos80_neg20.dat",
            "LCF_tt_wbwb_1000_neg80_pos20": "invcov_LCF_tt_wbwb_1000_neg80_pos20.dat",
            "LCF_tt_wbwb_1000_pos80_pos20": "invcov_LCF_tt_wbwb_1000_pos80_pos20.dat",
        }

        incovs_reordered = []
        for path in self.datasets.values():
            invcov = np.loadtxt(current_file_path / path)
            temp = jnp.einsum("ij, jk, kl", self.project.T, invcov, self.project)
            incovs_reordered.append(temp)
        self.incov_tot = jnp.sum(jnp.array(incovs_reordered), axis=0)

        self.rgemat = rgemat

        if self.rgemat is not None:
            # multiply the RGE matrix as well
            self.incov_tot = jnp.einsum(
                "ij, jk, kl", self.rgemat.T, self.incov_tot, self.rgemat
            )

        self.n_dat = len(oo_tt_wc_basis)

    def compute_chi2(self, coefficient_values):
        chi2_value = jnp.einsum(
            "i, ij, j", coefficient_values, self.incov_tot, coefficient_values
        )

        return chi2_value
